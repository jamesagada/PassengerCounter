/**
    PCN (Passenger CouNter)
    Purpose: Creating a computer vision system that counts passengers entering/exiting a door in a transportation environment

    @author Mattia Dal Ben
    @version 1.0 23/02/2017

*/

#include <iostream>
#include <opencv2/opencv.hpp>

#include "passenger.cpp"

using namespace cv;
using namespace std;

// The XCOMPILER uses a different OpenCV version from my main machine
// so I ended up splitting the code using this constant
//#define XCOMPILER

// Calibration
#define THRESHOLD 120
#define AREA_THRESHOLD 500     // This depends on the camera distance from the passengers

#define X_NEAR 50
#define Y_NEAR 50

#define MAX_PASSENGER_AGE 90 // 30 FPS * 3 seconds (HP: 30fps camera)

int main(int argc, char * argv[])
{
    VideoCapture cap;

    // Passenger counters
    int cnt_in  = 0;
    int cnt_out = 0;

    // Passengers tracker
    int pid = 0;
    vector<Passenger> passengers;

    // Streams
    Mat frame;       //input stream
    Mat fgMaskMOG2;  //fg mask generated by MOG2 method
    Mat morphTrans;  //fgMaskMOG2 after morphological transformations

    // Contours variables
    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;

    // Kernels for morphological transformations
    Mat kernelOp = Mat::ones(3, 3, CV_8U);
    Mat kernelCl = Mat::ones(11, 11, CV_8U);;

    // Background subtraction variables
    Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor

#ifdef XCOMPILER
    pMOG2 = new BackgroundSubtractorMOG2();
#else
    int history = 1000;
    double varThreshold = 20;
    bool detectShadows = false;
    pMOG2 = createBackgroundSubtractorMOG2(history, varThreshold, detectShadows);
#endif

    // --INITIALIZE VIDEOCAPTURE
    if(argc == 1)
    {
        // Open the default camera using default API
        cap.open(0);

        if(!cap.isOpened())
        {
            cerr << "ERROR! Unable to open camera\n";
            return -1;
        }
    }
    else if(argc == 2)
    {
        // Open the video file passed as argument
        cap.open(argv[1]);

        if(!cap.isOpened())
        {
            cerr << "ERROR! Unable to open video\n";
            return -1;
        }
    }
    else
    {
        // --HELP
        cout << "HELP Avalable modes:\n";
        cout << "           - Without arguments: it opens the default webcam and captures the input stream.\n";
        cout << "<filename> - Input video: it opens the file passed as argument and captures the stream.\n";
        return 0;
    }

    // --SETUP WINDOWS
    namedWindow("Live",WINDOW_AUTOSIZE);
    //namedWindow("BackgroundSubtraction", WINDOW_AUTOSIZE);
    //namedWindow("MorphologicalTransfor", WINDOW_AUTOSIZE);

    // --GRAB AND WRITE LOOP
    cout << "Start grabbing loop\n";

    for(;;)
    {
        // Wait for a frame from camera/video and store it into frame
        bool bSuccess = cap.read(frame);

        // Check for errors
        if (!bSuccess) //if not success, break loop
        {
            cout << "ERROR! Cannot read the frame from video file\n";
            break;
        }

        if (frame.empty()) {
            cerr << "ERROR! Blank frame grabbed\n";
            break;
        }

        line( frame,                    
              Point(frame.cols/2,0),            //Starting point of the line
              Point(frame.cols/2,frame.rows),   //Ending point of the line
              Scalar(0,0,255),                  //Color
              2,                                //Thickness
              8);                               //Linetype

        // Flipping image upside down (needed only on my laptop)
        //flip(frame,frame,0);
        
	    // --BACKGROUND SUBTRACTION
#ifdef XCOMPILER
        pMOG2->operator()(frame, fgMaskMOG2, 0.1);
#else
        pMOG2->apply(frame, fgMaskMOG2, 0.1);
#endif

        // --MORPHOLOGICAL TRANSFORMATION
        // Threshold the image
        threshold(fgMaskMOG2, morphTrans, THRESHOLD, 255, THRESH_BINARY);

        morphologyEx( morphTrans, morphTrans, MORPH_OPEN, kernelOp );
        morphologyEx( morphTrans, morphTrans, MORPH_CLOSE, kernelCl );

        // Blur
        for ( int i = 1; i < 31; i = i + 2 )
        { 
            GaussianBlur( morphTrans, morphTrans, Size( i, i ), 0, 0 );
        }

        // --FINDING CONTOURS
        findContours(morphTrans, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_NONE);

        //Drawing contours
        int idx = 0;
        for( ; idx >= 0; idx = hierarchy[idx][0] )
        {
            // Draw contours for every detected object
            // drawContours( frame, contours, idx, Scalar(0,255,0), 2, 8, hierarchy, 0, Point(0,0) );

            // -- AREA
            // Calculating area
            double area0 = contourArea(contours[idx]);

            // Approximate area
            vector<Point> approx;
            approxPolyDP(contours[idx], approx, 5, true);
            double area1 = contourArea(approx);

            if(area1 > AREA_THRESHOLD)
            {
                // --TRACKING
                Moments M = moments(contours[idx]);
                
                // Getting mass center
                Point2f mc = Point2f( M.m10/M.m00 , M.m01/M.m00 );

                // Getting bounding rectangle
                Rect br = boundingRect(contours[idx]);

                // Drawing mass center and bounding rectangle
                rectangle( frame, br.tl(), br.br(), Scalar(0,255,0), 2, 8, 0 );
                circle( frame, mc, 5, Scalar(0,0,255), 2, 8, 0 );

                // --PASSENGERS DB UPDATE
                bool newPassenger = true;
                for(int i = 0; i < passengers.size(); i++)
                {
                    // If the object is near a known object
                    if( abs(mc.x - passengers[i].getX()) <= X_NEAR &&
                        abs(mc.y - passengers[i].getY()) <= Y_NEAR )
                    {
                        // Update coordinates
                        newPassenger = false;
                        passengers[i].updateCoords(mc);
                        break;
                    }
                }

                // If wasn't near any known object is a new passenger
                if(newPassenger)
                {
                    Passenger p(pid, mc);
                    passengers.push_back(p);
                    pid++;
                }
            }
        }

        // For every passenger
        for(int i = 0; i < passengers.size(); i++)
        {
            // -- DRAWING PASSENGER TRAJECTORIES
            if(passengers[i].getTracks().size() > 2)
            {
                polylines(frame, passengers[i].getTracks(), false, passengers[i].getTrackColor(),3);
            }

            // --UPDATE PASSENGER STATS
            // Updating age
            passengers[i].updateAge();

            // Removing older passengers
            // NB: The age depends on the FPS that the camera is capturing!
            if(passengers[i].getAge() > MAX_PASSENGER_AGE)
            {
                passengers.erase(passengers.begin() +i);
            }
        }

        // Show frame
        imshow("Live",frame);
        //imshow("BackgroundSubtraction", fgMaskMOG2);
        //imshow("MorphologicalTransfor", morphTrans);

        if(waitKey(30) == 27) //wait for 'esc' key press for 30 ms. If 'esc' key is pressed, break loop
        {
            cout << "esc key is pressed by user" << endl; 
            break;
        }
    }

    destroyAllWindows(); 
    return 0;
}

